FORMAT: 1A
HOST: https://naturenet-staging.firebaseio.com

# NatureNet

NatureNet is a citizen science project with a crowd-sourced design.
The goal to increase motivation for participation and to identify
creative ways in which people can contribute to sustainable bio-diversity.

----

## Hosts

The NatureNet data is stored in [Firebase](https://www.firebase.com). There are three apps available for different usages
each has the same data model and endpoints as described here but contain different data sets.

- Testing (`https://naturenet-testing.firebaseio.com`): 
  No guaranteed contents. This app is used as a test target for the various clients and the heroku worker. Data can
  be written to, or deleted from, this app at any time.
  
- Staging (`https://naturenet-staging.firebaseio.com`):
  Mirrors the production database and may have additional testing data. This app is used as a target for beta or integration
  testing of the applications. The heroku worker will mirror data from production into this app as it is written but the
  contents are not guaranteed to match 100%.
  
- Production (`https://naturenet.firebaseio.com`):
  This app contains the live data from published clients and should only be accessed via a client. It should not be used as
  a target for any testing.

All links and the interactive samples in this document are based on the `Staging` host.

## Heroku Worker

> NOTE: The heroku app is not yet implemented. All references to Heroku functionality are hypothetical.

In addition to Firebase there is a NatureNet app hosted on Heroku which performs background data processing as well
as providing some additional REST endpoints. As with the firebase databases there are three versions of the worker
for the same purpose. Should full text search be required the heroku worker will host the 
[ElasticSearch](https://www.elastic.co/products/elasticsearch) process.

- Testing (`https://testing.nature-net.org`): 
  REST endpoint are active and target the testing database. Does not perform any syncing.
  
- Staging (`https://staging.nature-net.org`): 
  REST endpoints are active and target the staging database. Does not perform any syncing.
  
- Production (`https://api.nature-net.org`): 
  REST endpoints are active and target the staging database. Watches the production database for events as
  mirrors data create/update/delete into staging.

## HTTP Access and Native Clients

Firebase provides both an HTTP REST API and native clients in a variety of languages. This documentation will as much as
possible cover only the HTTP API with the exception being the section on location queries which requires a client. The
sample requests here do not always show or make use of the full range of parameters available, be sure to read the
[REST documentation](https://www.firebase.com/docs/rest/guide/).

## Data Model

```
        +------------------------+               +-------------------------+
        |                        |               |                         |
        |   IDEA                 |               |   ACTIVITY              |
+-------->  * id                 |               |   * id              <-------+
|       |   * group              |               |   * name                |   |
|       |   * content            |               |   * description         |   |
|       |   * icon_url           |               |   * icon_url            |   |
|       |   * status             |               |   * status              |   |
|       |   * submitter     +------------+       |   * latest_contribution |   |
|       |   * [likes]            |       |       |                         |   |
|       |     * user        +------------+       +-------------------------+   |
|       |   * [comments]         |       |                                     |
|   +----+    * id               |       |       +-------------------------+   |
|   |   |                        |       |       |                         |   |
|   |   +------------------------+       |       |   ACTIVITY_LOCATION     |   |
|   |                                +------------>  * id                  |   |
|   |   +------------------------+   |   |       |   * activity        +-------+
|   |   |                        |   |   |   +----+  * site                |
|   |   |   OBSERVATION          |   |   |   |   |   * l                   |
+-------->  * id                 |   |   |   |   |   * g                   |
|   |   |   * activity_location +----+   |   |   |   * latest_contribution |
|   |   |   * observer          +--------+   |   |                         |
|   |   |   * l                  |       |   |   +-------------------------+
|   |   |   * g                  |       |   |
|   |   |   * data               |       |   |   +-------------------------+
|   |   |   * [likes]            |       |   |   |                         |
|   |   |     * user            +--------+   |   |   USER                  |
|   |   |   * [comments]         |       +-------->  * id              <-------+
|   +----+    * id               |       |   |   |   * display_name        |   |
|   |   |                        |       |   |   |   * avatar              |   |
|   |   +------------------------+       |   |   |   * bio                 |   |
|   |                                    |   +----+  * affiliation         |   |
|   |   +------------------------+       |   |   |   * latest_contribution |   |
|   |   |                        |       |   |   |                         |   |
|   |   |   COMMENT              |       |   |   +-------------------------+   |
|   +---->  * id                 |       |   |                                 |
+--------+  * parent             |       |   |   +-------------------------+   |
        |   * commenter     +------------+   |   |                         |   |
        |   * comment            |           |   |   USER_PRIVATE          |   |
        |                        |           |   |   * id              +-------+
        +------------------------+           |   |   * consent             |   |
                                             |   |   * name                |   |
        +------------------------+           |   |                         |   |
        |                        |           |   +-------------------------+   |
        |   SITE                 |           |                                 |
        |   * id            <----------------+   +-------------------------+   |
        |   * name               |           |   |                         |   |
        |   * description        |           |   |   USER_GROUP            |   |
        |   * l                  |           |   |   * id                  |   |
        |   * g                  |           |   |   * name                |   |
        |                        |           |   |   * avatar              |   |
        +------------------------+           |   |   * description         |   |
                                             +----+  * affiliation         |   |
                                                 |   * owner           +-------+
                                                 |   * [members]           |   |
                                                 |     * member        +-------+
                                                 |                         |
                                                 +-------------------------+
```

### Location Data

Location data is stored in the database using [GeoFire](https://github.com/firebase/geofire-js). Each
entity with location data will have the data saved as a longitude - latitude pair as well as
a [geohash](https://en.wikipedia.org/wiki/Geohash). Every geolocated object will include data structued 
as follows:

```
{
    g: "xp7emzkmpw"
    l: [41.39326, 140.18072]
}
```

Where `g` is the geohash of the location stored as a `String` and `l` is an array containing `[longitude, latitude]`
values.

### Timestamps

Every entity has two timestamp attributes `created_at` and `updated_at`. These store
time since creation and last modification respectively as seconds since the Unix epoch. Firebase does not automatically
manage these attributes, a value must be set by the client in order for Firebase to take any action. It is possible
however to have Firebase use the server time to populate these fields by 
[setting them to a special value](https://www.firebase.com/docs/web/api/servervalue/timestamp.html). Using observations
as an example:

**Native Client**
```
var observation = new Firebase('https://naturenet-staging.firebaseio.com/observations/-KAc5Cx1M6_kGnoOHriy');
observation.update({ updated_at: Firebase.ServerValue.TIMESTAMP });
```

**REST API**
```
PATCH https://naturenet-staging.firebaseio.com/observations/-KAc5Cx1M6_kGnoOHriy.json

{
    "updated_at": {".sv": "timestamp"}
}
```

Any record modifications performed via the Heroku worker instead of directly through firebase do not need to manage
timestamping as the worker will populate the correct fields automatically.

### Geospatial Queries

Any entity that has a top level `g` attribute containing a geohash can be searched for by location using GeoFire. GeoFire queries
have two limitations:

1. Can only search in a radius around a point, no advanced geometries.
2. Must be performed via a native client.

GeoFire queries act very similar to Firebase streaming queries in that the client starts the query and then provides
a callback that will recieve data as it is found. Unlike regular Firebase queries there is no equivalent to the `once`
one-shot call.

The query works on collections as a whole, when a record has a location that matches the query all that is returned to
the client is the id of that record. It is up to the client to load the full record separately.

[GeoFire documentation](https://github.com/firebase/geofire-js)

**Examples**

*Find observations within 20km of ACES*

```
var observations = new Firebase('https://naturenet-staging.firebaseio.com/observations');
var geo = new GeoFire(observations);
var query = geo.query({ center: [39.1965355, -106.8242489], radius: 20 });

var inRange = [];
query.on('key_entered', function(key, location, distance) {
    // load the observation record
    observations.child(key).once('value', 
        function(snapshot) {
            inRange.push(snapshot.val());
        }, 
        function(error) {
            // uh-oh
        });
});

// 'ready' is called after the first data payload has been recieved 
// and all other event callbacks are complete.
query.on('ready', function() {

    // NOTE: This snippet tries to simulate a one-shot query for 
    //       location data. It is not necessary to immediately 
    //       cancel the query, the application can consume keys 
    //       as they stream in, for example to keep an 'observations
    //       near me' display updated.
    query.cancel();
    useObservationData(inRange);
});

```

*Find activities within 20km ACES*

```
var locations = new Firebase('https://naturenet-staging.firebaseio.com/geo/activities');
var activities = new Firebase('https://naturenet-staging.firebaseio.com/activities');
var geo = new GeoFire(locations);
var query = geo.query({ center: [39.1965355, -106.8242489], radius: 20 });

var inRange = [];
query.on('key_entered', function(key, location, distance) {
    // since activity locations is a link table we need to resolve 
    // the link record and then separately load the activity record
    locations.child(key).once('value', 
        function(snapshot) {
            var activityKey = snapshot.val().activity;
            activities.child(activityKey).once('value', 
                function(snapshot) {
                    inRange.push(snapshot.val());
                }, 
                function(error) {
                    // uh-oh
                });
        }, 
        function(error) {
            // uh-oh again
        });
});

query.on('ready', function() {
    query.cancel();
    useActivityData(inRange);
});
```

### Values & Validation
Firebase validates data on write requests before applying changes. Validation rules can take into account 
paths, child names, types, and values depending on context. In general, children will be checked by name 
and type, and may be required or optional. Any other children will be rejected. Child values are not generally 
checked except when the value should match the UID of the current user or the key of the parent record.
Validation takes into account all records in the heirarchy from the root to the place of the write, so a 
malformed parent record will reject any writes to its children even if the new data is valid. Validation is 
done at the record level, so new records must be created as a single valid write rather than individual values.
Validation rules can be accessed in the Security & Rules tab of the Firebase dashboard, or in a more human-readable
format in the [naturenet-node](https://github.com/naturenet/naturenet-node/tree/master/rules) repository.

Many records contain arbitrary string values. These strings may represent user input, or enumerated values which are 
meaningful to the clients. These values may be subject to change, and may be case-insensitive, so care should be taken
when comparing or checking for these values in client code. Expected values are called out below with their respective records.


### Sites [/sites]

```
+------------------------+
|                        |
|   SITE                 |
|   * id           <--------- ACTIVITY_LOCATION::site
|   * name               |
|   * description        |
|   * l                  |
|   * g                  |
|                        |
+------------------------+
```

The sites collection contains the basic data about each site that is part of NatureNet.

Site data cannot be created via any of the apps.

**Access**:
- *read*: public, unauthenticated
- *write*: forbidden

+ Attributes
    + id (string, required) - unique id for the site, set by the creator (not auto-generated)
    + name (string, required) - the name of the site for display
    + description (string, required) - a description of the site
    + l (object, required) - a central lat/long coordinate for the whole site
    + g (string, required) - a central geohash for the whole site

#### List Sites [GET /sites.json]

Returns an object containing all the sites available in the database. The response will have a
key-value pair for each site where the key is the site's `id` and the value is the record for
that site.

+ Response 200 (application/json)

        {
          "aces" : {
            "created_at" : 1455588677934,
            "description" : "Aspen Center for Environmental Studies",
            "id" : "aces",
            "g" : "9wuncpsbqe",
            "l" : [ 39.1965355, -106.8242489 ],
            "name" : "ACES",
            "updated_at" : 1455588677934
          },
          "shirakami" : {
            "created_at" : 1455588677935,
            "description" : "Shirakami Mountain National Park",
            "id" : "shirakami",
            "g" : "xp7ew7weu3",
            "l" : [ 41.4163605, 140.2056501 ],
            "name" : "白神山地",
            "updated_at" : 1455588677935
          }
        }

#### Read Site [GET /sites/{id}.json]

Returns a single site record from the database.

+ Parameters
    + id: `aces` (required) - the id of the site to read.
    
+ Response 200 (application/json)

        {
            "created_at" : 1455588677934,
            "description" : "Aspen Center for Environmental Studies",
            "id" : "aces",
            "g" : "9wuncpsbqe",
            "l" : [ 39.1965355, -106.8242489 ],
            "name" : "ACES",
            "updated_at" : 1455588677934
        }

### Activities [/activities]

```
+----------------------+
|                      |
|   ACTIVITY           |
|   * id          <--------- ACTIVITY_LOCATION::activity
|   * name             |
|   * description      |
|   * icon_url         |
|   * status           |
|                      |
+----------------------+
```

The activities collection contains all the structured activities that users can perform
in order to submit observations. An activity record in this collection contains the basic
description of the activity itself. Since an identical activity can be present in multiple
sites location data for activites is stored separately in `Activity Locations`.

Activity data cannot be created via any of the apps.

**Access**:
- *read*: public, unauthenticated
- *write*: forbidden

**Template**

> NOTE: Speculative. Not currently implemented.

The template value in an activity record is data to be consumed by the client application
in order to determine how to display the activity to the user. The object will contain one
key for each client type the value of which may be meaningful only to the client and might
be a url for an HTML page to render or the name of a native view to load.

example:
```
template: {
    web: "http://www.naturenet.org/activities/ca.html",
    ios: "http://www.naturenet.org/activities/ca-ios.html",
    android: "http://www.naturenet.org/activities/ca-android.html"
}
```

+ Attributes
    + id (string, required) - unique autogenerated-id for the activity
    + name (string, required) - the name of the activity for display
    + description (string, required) - a description of the activity
    + icon_url (string, required) - an icon to represent the activity
    + template (object, optional) - the client template used to render the activity
    + status (string, required) - indicates whether the activity should accept new observations (values: "Open", "Completed")

#### List Activities [GET /activities.json]

Returns an object containing all activities available in the database. The response will have a
key-value pair for each activitiy where the key is the activity's `id` and the value is the record for
that activity.

+ Response 200 (application/json)

        {
          "-KAc4wauhnjXqSezmzq-" : {
            "created_at" : 1455592819273,
            "description" : "Bomrumsib evo hu no wifob dutu nacaksap fof nuva kanruh bakte ziwbam de fec. Gosen zesizimop esurece hemzosuc hakurof fafev ri manes uca ligerorag er dipuwnal cim fejoewa. Hu bip ravon mevmutdim alotecgal es egimupsiv ove wivzaf ijka tucufa vecel gepres rem av taudoom cezhoslok kif. Bu hicibu turtuv ib vesak gusmuz bo hibmuwav elmotmi libop uf sa. Gaf deun givatjaj ojizuve bapesu pudag vup ubpu ganot bapon ho omte du. Gaf zurmouho su ezo ejoeka pusjubi mivibmu fuvobo wiewo ijaj penjuko ji duadima hur ujtorik laijga.",
            "icon_url" : "http://res.cloudinary.com/university-of-colorado/image/upload/v1431461261/3_Backyard_nxipz5.png",
            "id" : "-KAc4wauhnjXqSezmzq-",
            "name" : "activity-de",
            "template" : {
              "andriod" : "http://www.naturenet.org/activities/de-andriod",
              "ios" : "http://www.naturenet.org/activities/de-ios",
              "web" : "http://www.naturenet.org/activities/de"
            },
            "updated_at" : 1455592819273
          },
          "-KAc4wha5wfIDKSZUm3i" : {
            "created_at" : 1455592819700,
            "description" : "Gehize hahor abunev izair uza genko adozi na zokaj mavsizgo kuncufi ehipuvbuz lo razu. Elomuk zi cininmon arbov cuum vebcahoj zagi koakzod zudafopik tan od pu bunnuzdok safikmiv. Hib huko ha eh kir wu kapid anivili ko ti kifichef pizsuaw lidvutul pasfe rumafbe kepcemuw masuned ce. Piisuhil rona nij mig ge cicuke ateotubo viid la ju ratuji nem moncorme surez wubmegik sat milalho abi. Okogeih worsef ehdowe ro orpewo fa pewutij ne hergef sihhompe rubuwluk gotjulfik vowzu veupute we fa. Fovzu vudje ki ulutignu gupiuze kef ceftazo wuhmope emoorikap ulejekes ka cuhoh.",
            "icon_url" : "http://res.cloudinary.com/university-of-colorado/image/upload/v1431461260/3_Who_ncnsij.png",
            "id" : "-KAc4wha5wfIDKSZUm3i",
            "name" : "activity-fuhruogi",
            "template" : {
              "andriod" : "http://www.naturenet.org/activities/fuhruogi-andriod",
              "ios" : "http://www.naturenet.org/activities/fuhruogi-ios",
              "web" : "http://www.naturenet.org/activities/fuhruogi"
            },
            "updated_at" : 1455592819700
          }
        }
        
#### Read Activity [GET /activities/{id}.json]

Returns a single activity record from the database.

+ Parameters
    + id: `-KAc4wauhnjXqSezmzq-` (required) - the id of the activity to read.
    
+ Response 200 (application/json)

        {
            "created_at" : 1455592819273,
            "description" : "Bomrumsib evo hu no wifob dutu nacaksap fof nuva kanruh bakte ziwbam de fec. Gosen zesizimop esurece hemzosuc hakurof fafev ri manes uca ligerorag er dipuwnal cim fejoewa. Hu bip ravon mevmutdim alotecgal es egimupsiv ove wivzaf ijka tucufa vecel gepres rem av taudoom cezhoslok kif. Bu hicibu turtuv ib vesak gusmuz bo hibmuwav elmotmi libop uf sa. Gaf deun givatjaj ojizuve bapesu pudag vup ubpu ganot bapon ho omte du. Gaf zurmouho su ezo ejoeka pusjubi mivibmu fuvobo wiewo ijaj penjuko ji duadima hur ujtorik laijga.",
            "icon_url" : "http://res.cloudinary.com/university-of-colorado/image/upload/v1431461261/3_Backyard_nxipz5.png",
            "id" : "-KAc4wauhnjXqSezmzq-",
            "name" : "activity-de",
            "template" : {
              "andriod" : "http://www.naturenet.org/activities/de-andriod",
              "ios" : "http://www.naturenet.org/activities/de-ios",
              "web" : "http://www.naturenet.org/activities/de"
            },
            "updated_at" : 1455592819273
        }

### Activity Locations [/geo/activities]

```
+-------------------------+
|                         |
|   ACTIVITY_LOCATION     |
|   * id          <-------------- OBSERVATION::activity_location
|   * activity    +-------------> ACTIVITTY::id
|   * site        +-------------> SITE::id
|   * l                   |
|   * g                   |
|   * latest_contribution |
|                         |
+-------------------------+
```

The activity location collection links activity records to one or more locations in one or more sites.
Each entry in this collection represents one location where an activity is present.

Activity locations cannot be created via any of the apps, however an authenticated user can update
the `latest_contribution` field.

**Access**:
- *read*: public, unauthenticated
- *write*: forbidden

***latest_contribution***:
- *write*: authenticated user

+ Attributes
    + id (string, required) - unique autogenerated-id for the activity location
    + activity (string, required) - the id of the activity being located
    + site (string, required) - the id of the site associated with this location
    + l (object, required) - the lat/long coordinate where the activity can be performed
    + g (string, required) - the geohash where the activity can be performed
    + latest_contribution (number, optional) - the timestamp of the most recent observation associated with this activity location
    
#### List Activity Locations [GET /geo/activities.json]

Returns an object containing all activity locations available in the database. The response will have a
key-value pair for each activitiy location where the key is the location's `id` and the value is the record for
that activity.

+ Response 200 (application/json)

        {
              "-KAc4wQe6I_-pLm8beEF": {
                "activity": "-KAc4wOQI_5_Jgm4pJyn",
                "id": "-KAc4wQe6I_-pLm8beEF",
                "g": "9wup2ctzz1",
                "l": [39.25274, -106.83384],
                "site": "aces"
              },
              "-KAc4wXO14m8w5WyWpDs": {
                "activity": "-KAc4wV773lqxuhz1iK4",
                "id": "-KAc4wXO14m8w5WyWpDs",
                "g": "xp7ez8xzpx",
                "l": [41.44442, 140.26244],
                "site": "shirakami"
              }
        }


#### Read Activity Location [GET /geo/activities/{id}.json]

Returns a single activity location record from the database.

+ Parameters
    + id: `-KAc4wXO14m8w5WyWpDs` (required) - the id of the activity location to read.

+ Response 200 (application/json)

        {
            "activity": "-KAc4wV773lqxuhz1iK4",
            "id": "-KAc4wXO14m8w5WyWpDs",
            "g": "xp7ez8xzpx",
            "l": [41.44442, 140.26244],
            "site": "shirakami"
        }

#### List Locations For Activity Or Site [GET /geo/activities.json{?orderBy}{?equalTo}]

Returns all locations where a specific activity is located or lists activity locations available at a site.

+ Parameters
    + orderBy: `"activity"` (required) - what type of record to list for, must be one of ["activity", "site"]
    + equalTo: `"-KAc4wV773lqxuhz1iK4"` (required) - the id of the activity or site to find locations for
    
+ Response 200 (application/json)

### Observations [/observations]

```
+------------------------+
|                        |
|   OBSERVATION          |
|   * id                 |
|   * activity_location +-----> ACTIVITY_LOCATION::id
|   * observer          +-----> USER::id
|   * l                  |
|   * g                  |
|   * data               |
|   * [likes]            |
|     * user            +-----> USER::id
|   * [comments]         |
|     * id              +-----> COMMENT::id
|                        |
|                        |
+------------------------+
```

The observations collection contains all user submitted observations in the database.
An observation is associated with both an `Activity` and a `Site` via an `ActivityLocation`
record. Any user may submit an observation.

**Access**:
- *read*: public, unauthenticated
- *write*:
  - *create*: authenticated user
  - *update*: authenticated creator only
  - *delete*: authenticated creator only

***Comments***:
- *write*:
  - *create*: authenticated user
  - *update*: authenticated comment creator only
  - *delete*: authenticated comment creator only

**Data**

Each observation contains data specific to the activity it was submitted for. The `data` attribute
in an observation stores the actual user submitted data as a freeform object. There are no guarantees
as to what structure this data will have.

+ Attributes
    + id (string, required) - unique autogenerated-id for the observation (MUST match the key of this record)
    + activity_location (string, required) - the id of the activity location pair this observation was recorded for (Should match the key of an ACTIVITY_LOCATION whose site matches the submitter's affiliation)
    + observer (string, required) - the id of the user who submitted the observation (MUST match authenticated user's UID)
    + l (object, required) - the lat/long coordinate where the observation took place
    + g (string, required) - the geohash where the observation took place
    + data (object, required) - freeform data submitted as part of the observation
    + likes (object, optional) - likes by other users on the observation, by user id, may be null/not present if there are no likes
    + comments (object, optional) - comments by other users on the observation, by comment id, may be null/not present if there are no comments
    
#### List Observations [GET /observations.json{?orderBy}{?limitToFirst}]

Returns an object containing all observations available in the database. The response will have a
key-value pair for each observation where the key is the observation's `id` and the value is the record for
that observation.

> NOTE: The full set of observation data is potentially huge. You should never make a raw request against this
> endpoint without some form or query and/or response limit. Data export is available for offline research.

+ Parameters
    + orderBy: `"$key"` (string, optional) - what key to order the results by
    + limitToFirst: `4` (number, optional) - limit the number of responses

+ Response 200 (application/json)

        {
          "-KAc5Cx1M6_kGnoOHriy" : {
            "activity_location" : "-KAc4vmZ6F4dVunz5Yvw",
            "comments" : {
              "-KAc5PhyQsLi_vd6OllJ" : true,
              "-KAc5S9-pjitmmQraJUu" : true,
              "-KAc5SRJKPwtFvHo_E52" : true,
            },
            "created_at" : 1455592890321,
            "data" : {
              "baz" : 2,
              "ducks" : true,
              "foo" : "bar"
            },
            "id" : "-KAc5Cx1M6_kGnoOHriy",
            "g" : "xp7eemrewu",
            "l" : [ 41.42595, 140.07529 ],
            "observer" : "3480f925-c4fc-4576-b534-2b38d3fc6456",
            "updated_at" : 1455592890321
          },
          "-KAc5D3K4jmr70FiqwjH" : {
            "activity_location" : "-KAc4vMYMlYznb2jusY1",
            "comments" : {
              "-KAc5UvOoQcjiznIz0uG" : true
            },
            "created_at" : 1455592890789,
            "data" : {
              "baz" : 2,
              "ducks" : true,
              "foo" : "bar"
            },
            "id" : "-KAc5D3K4jmr70FiqwjH",
            "g" : "xp7s5pfpwu",
            "l" : [ 41.52826, 140.05675 ],
            "observer" : "4446932b-c430-4d82-8768-435061b6b322",
            "updated_at" : 1455592890789
          },
          "-KAc5DIhBq7myDffPENg" : {
            "activity_location" : "-KAc4wd8ZfopkJnsQfkO",
            "created_at" : 1455592891772,
            "data" : {
              "baz" : 2,
              "ducks" : true,
              "foo" : "bar"
            },
            "id" : "-KAc5DIhBq7myDffPENg",
            "g" : "9wgywgkf0u",
            "l" : [ 39.12955, -106.92337 ],
            "observer" : "140abc29-b3b3-482b-9a6a-5ba4088aab8f",
            "updated_at" : 1455592891772
          },
          "-KAc5DPSlxBuRNlPaCMH" : {
            "activity_location" : "-KAc4uDmThJ-lXyXAKCC",
            "comments" : {
              "-KAc5Pt4r4hlT6_g-PPC" : true
            },
            "created_at" : 1455592892205,
            "data" : {
              "baz" : 2,
              "ducks" : true,
              "foo" : "bar"
            },
            "id" : "-KAc5DPSlxBuRNlPaCMH",
            "g" : "9wup4n6mgz",
            "l" : [ 39.23458, -106.78385 ],
            "observer" : "9031b7a3-bc5a-4ae0-9113-9f392895c42c",
            "updated_at" : 1455592892205
          }
        }

#### Read Observation [GET /observations/{id}.json]

Returns a single observation record from the database

+ Parameters
    + id: `-KAc5DPSlxBuRNlPaCMH` (required) - the id of the observation to read.

+ Response 200 (application/json)

        {
            "activity_location" : "-KAc4uDmThJ-lXyXAKCC",
            "comments" : {
              "-KAc5Pt4r4hlT6_g-PPC" : {
                "comment" : "Setoto uhuhat menurwef italib daj si mevpovub azcohun upcu huw rifdo hukvi tunruwet gadtojtul.",
                "commenter" : "3480f925-c4fc-4576-b534-2b38d3fc6456"
              }
            },
            "created_at" : 1455592892205,
            "data" : {
              "baz" : 2,
              "ducks" : true,
              "foo" : "bar"
            },
            "id" : "-KAc5DPSlxBuRNlPaCMH",
            "g" : "9wup4n6mgz",
            "l" : [ 39.23458, -106.78385 ],
            "observer" : "9031b7a3-bc5a-4ae0-9113-9f392895c42c",
            "updated_at" : 1455592892205
        }
        
#### Create Observation [POST /observations.json]

Submit a new observation for the current user. Observation records require their firebase
key to be stored as part of the record, requests that do not contain the id will be rejected.
All observations should be created as multi-location updates, also updating the `latest_contribution`
timestamp of the associated user and activity_location objects.
It is recommended to use a native client to achieve this:

```
var observations = new Firebase('https://naturenet-staging.firebaseio.com/observations');
var obsId = observations.push().key();
var newData = {};
newData['/observations/' + obsId] = {
  id: obsId,
  observer: userId,
  activity_location: projectId,
  // other attributes
};
newData['/users/' + userId + '/latest_contribution'] = Firebase.ServerValue.TIMESTAMP;
newData['/geo/activities/' + projectId + '/latest_contribution'] = Firebase.ServerValue.TIMESTAMP;
```

Alternatively the heroku worker provides an endpoint that will handle this on the clients
behalf. To submit an observation via the worker do `POST https://staging.nature-net.org/observations`
with the new observation data. The worker will ensure the id is set and will return the same
result as firebase would.

+ Response 201 (application/json)

#### Update Observation [PATCH /observations/{id}.json]

Update a subset of an observation. A `PATCH` update will update just the keys/values present in the request. To replace an
observation use `PUT` to the same URI.

> NOTE: If you are updating the `data` object for an observation a `PATCH` request to `/observations/{id}` will 
> overwrite the entire value of the data object. If you want to update just one part of the data object you should 
> PATCH against the data object directly. e.g. `PATCH https://naturenet-staging.firebaseio.com/observations/{id}/data`

+ Parameters
    + id: `-KAc5DPSlxBuRNlPaCMH` (required) - the id of the observation to update.

+ Request (application/json)

    + Body

            {
                "data": { "patched": true },
                "updated_at": { ".sv": "timestamp" }
            }

+ Response 200 (application/json)

        {
          "data": {
            "patched": true
          },
          "updated_at": 1455631866669
        }

#### Delete Observation [DELETE /observations/{id}.json]

Deletes an observation and all associated comments from the database. Can only be performed by the user who submitted
the observation.

+ Parameters
    + id: `-KAc5DPSlxBuRNlPaCMH` (required) - the id of the observation to delete.
    
+ Response 200 (application/json)

        null

### Ideas [/ideas]

```
+------------------------+
|                        |
|   IDEA                 |
|   * id                 |
|   * group              |
|   * content            |
|   * icon_url           |
|   * status             |
|   * submitter     +---------> USER::id
|   * [likes]            |
|     * user        +---------> USER::id
|   * [comments]         |
|     * id              +-----> COMMENT::id
|                        |
|                        |
+------------------------+
```

The ideas collection contains all user submitted design ideas for improving NatureNet itself. Any user
may submit an idea.

**Group**
Group denotes the category that the idea belongs to. New ideas should use either "Idea" or "Challenge". 
Legacy ideas may have other values, which should be treated as "Idea" for display purposes.

**Status**
Status indicates the idea's place in the design process. All new ideas should be created with the status "to do". 
At some point the status may change to values such as "doing", "done", "deleted", or others TBD.

**Access**:
- *read*: public, unauthenticated
- *write*:
  - *create*: authenticated user
  - *update*: authenticated creator only
  - *delete*: authenticated creator only

***Comments***:
- *write*:
  - *create*: authenticated user
  - *update*: authenticated comment creator only
  - *delete*: authenticated comment creator only
  
+ Attributes
    + id (string, required) - unique autogenerated-id for the idea (MUST match the key of this record)
    + group (string, required) - the name of the idea group this idea belongs to (Should be "Idea" or "Challenge")
    + content (string, required) - the user submitted text describing the idea
    + icon_url (string, optional) - url to an icon representing the idea or group, or a user-submitted image to illustrate the idea
    + status (string, required) - describes the state of the idea (proposed, implemented, deleted, etc.) (Should be "to do" when created)
    + submitter (string, required) - the id of the user who submitted the idea (MUST match the authenticated user's UID)
    + likes (object, optional) - likes by other users on the idea, by user id, may be null/not present if there are no likes
    + comments (object, optional) - comments by other users on the idea, by comment id, may be null/not present if there are no comments

#### List Ideas [GET /ideas.json{?orderBy}{?limitToFirst}]

Returns an object containing all ideas available in the database. The response will have a
key-value pair for each observation where the key is the idea's `id` and the value is 
the record for that idea.

> NOTE: The full set of idea data is potentially huge. You should never make a raw request against this
> endpoint without some form or query and/or response limit. Data export is available for offline research.

+ Parameters
    + orderBy: `"$key"` (string, optional) - what key to order the results by
    + limitToFirst: `4` (number, optional) - limit the number of responses

+ Response 200 (application/json)

        {
          "-KAc5NKSHVFGBjboMfHm": {
            "comments": {
              "-KAc5Qe879zOW59FnRAo": true,
              "-KAc5QgM5dpErFm_YRgU": true,
              "-KAc5TSAJiGihnLnufmQ": true,
              "-KAc5V1Ck6zRNWkk7WIK": true
            },
            "content": "Me bug kuazu zonluota amvowibu jirvowif wuce godre tivjiv ripo cuwlapoli gomnip.",
            "created_at": 1455592932853,
            "group": "It would be better if...",
            "icon_url": "http://res.cloudinary.com/university-of-colorado/image/upload/v1427400563/2_FreeObservations_mjzgnh.png",
            "id": "-KAc5NKSHVFGBjboMfHm",
            "submitter": "65402369-84a2-40a7-b70c-c09e7c686f95",
            "updated_at": 1455592932853
          },
          "-KAc5NMqMPHwiCEZl3HX": {
            "comments": {
              "-KAc5OgpO6R8lbwiGwh5": true,
              "-KAc5RsbK1Ue75Ncv1tF": true,
              "-KAc5RzOiHb5i-Fdjxyc": true,
              "-KAc5SoweI9SRicuY1v8": true,
              "-KAc5UdPxvUyhd9X3Qs9": true
            },
            "content": "Hotzutte urusivo vislo zolju wuzefa bic te konag burraga vugudah ewedet pe oso vustoj.",
            "created_at": 1455592932996,
            "group": "Open Suggestion",
            "icon_url": "http://res.cloudinary.com/university-of-colorado/image/upload/v1427400563/2_FreeObservations_mjzgnh.png",
            "id": "-KAc5NMqMPHwiCEZl3HX",
            "submitter": "1b1a155d-e663-4f42-9068-63d3eae623a0",
            "updated_at": 1455592932996
          },
          "-KAc5NP4xrS3lTm3O3_L": {
            "comments": {
              "-KAc5Q7PylghVwMgsGtJ": true,
              "-KAc5QND20dhNuRPbCP_": true,
              "-KAc5QbvB4StSbM4w_xU": true,
              "-KAc5UFrFFPqbkfCvw7G": true
            },
            "content": "Kofgez kot walag oh sagja daterba pepku senvidjal vidsik kikicpo sugnom jon ki fodumzo ugasub.",
            "created_at": 1455592933142,
            "group": "It would be better if...",
            "icon_url": "http://res.cloudinary.com/university-of-colorado/image/upload/v1427400563/2_FreeObservations_mjzgnh.png",
            "id": "-KAc5NP4xrS3lTm3O3_L",
            "submitter": "65402369-84a2-40a7-b70c-c09e7c686f95",
            "updated_at": 1455592933142
          },
          "-KAc5NRKaLMl0XaMnYhr": {
            "comments": {
              "-KAc5PTIP2RBeL9pBNaY": true,
              "-KAc5RhG90Xfyihp2qk3": true
            },
            "content": "Jaraj ezsah rac ocebo kibafami houw cuumrug lazgif egiwi nas isuh gunonso rez.",
            "created_at": 1455592933283,
            "group": "Open Suggestion",
            "icon_url": "http://res.cloudinary.com/university-of-colorado/image/upload/v1427400563/2_FreeObservations_mjzgnh.png",
            "id": "-KAc5NRKaLMl0XaMnYhr",
            "submitter": "fad7b5e2-91b9-4a2f-8e26-c060acfe13f6",
            "updated_at": 1455592933283
          }
        }

#### Read Idea [GET /ideas/{id}.json]

Returns a single idea record from the database

+ Parameters
    + id: `-KAc5NRKaLMl0XaMnYhr` (required) - the id of the idea to read.
    
+ Response 200 (application/json)

        {
            "comments": {
              "-KAc5PTIP2RBeL9pBNaY": true,
              "-KAc5RhG90Xfyihp2qk3": true
            },
            "content": "Jaraj ezsah rac ocebo kibafami houw cuumrug lazgif egiwi nas isuh gunonso rez.",
            "created_at": 1455592933283,
            "group": "Open Suggestion",
            "icon_url": "http://res.cloudinary.com/university-of-colorado/image/upload/v1427400563/2_FreeObservations_mjzgnh.png",
            "id": "-KAc5NRKaLMl0XaMnYhr",
            "submitter": "fad7b5e2-91b9-4a2f-8e26-c060acfe13f6",
            "updated_at": 1455592933283
        }

#### Create Idea [POST /ideas.json]

Submit a new idea for the current user. Idea records require their firebase
key to be stored as part of the record, requests that do not contain the id will be rejected. 
It is recommended to use a native client to achieve this:

```
var ideas = new Firebase('https://naturenet-staging.firebaseio.com/ideas');
var record = ideas.push();
record.set({
    id: record.key(),
    // other attributes
})
```

Alternatively the heroku worker provides an endpoint that will handle this on the clients
behalf. To submit an ideas via the worker do `POST https://staging.nature-net.org/ideas`
with the new ideas data. The worker will ensure the id is set and will return the same
result as firebase would.

+ Response 201 (application/json)

#### Update Idea [PATCH /ideas/{id}.json]

Update a subset of an idea. A `PATCH` update will update just the keys/values present
in the request. to replace an idea use `PUT` to the same url.

+ Parameters
    + id: `-KAc5NRKaLMl0XaMnYhr` (required) - the id of the idea to update.

+ Request

    + Body
            
            {
                "content": "My idea was updated",
                "modified_at": {".sv": "timestamp" }
            }
            
+ Response 200 (application/json)

        {
            "content": "My idea was updated",
            "modified_at": 1455592933283
        }


#### Delete Idea [DELETE /ideas/{id}.json]

Deletes an idea and all associated comments from the database. Can only be performed by the user who
submitted the idea.

+ Parameters
    + id: `-KAc5NRKaLMl0XaMnYhr` (required) - the id of the idea to delete.

+ Response 200 (application/json)

        null

### Users [/users]

```
+-------------------------+
|                         |
|   USER                  |
|   * id          <------------+-- IDEA::submitter
|   * display_name        |    |
|   * avatar              |    +-- OBSERVATION::observer
|   * bio                 |    |
|   * affiliation         |    +-- [comments]::commenter
|   * latest_contribution |
|                         |
+-------------------------+
```

The users collection contains the application domain data about registered NatureNet user.
The user record does not contain any actual authentication information as this is handled
by Firebase and is not exposed. The user record is publicly readable and thus contains only
public profile information.

**`id` and `auth.uid`**

When a user is created firebase will assign them a unique id which they will use internally
to store the users authentication data. The `id` attribute of a user record is the same as
this authentication id. This is a random token and does not by itself contain any authentication 
information.

[Firebase documentation](https://www.firebase.com/docs/security/guide/user-security.html)

**Access**:

- *read*: public, unauthenticated
- *write*:
  - *create*: authenticated user
  - *update*: authenticated owner only
  - *delete*: authenticated owner only

+ Attributes
    + id (string, required) - the firebase generated auth id for this user (MUST match the key of this record)
    + display_name (string, required) - the name the user wants displayed on their content
    + avatar (string, optional) - url to an image representing the user
    + bio (string, optional) - brief text describing the user
    + affiliation (string, required) - the site the user is associated with (Should match the key of a SITE record)
    + latest_contribution (number, optional) - the timestamp of the most recent observation associated with this user, if any

### Users Private [/users-private]

```
+----------------------+
|                      |
|   USER-PRIVATE       |
|   * id          <----+-- USER::id
|   * consent          |
|   * name             |
|                      |
+----------------------+
```

The users-private collection contains the non-public data about registered NatureNet users.
The private record does not contain any actual authentication information as this is handled
by Firebase and is not exposed. The private record has restricted read permissions to protect
the user's privacy.

**Consent**

In order to register users must provide consent to have their data used for research purposes.
There are several required consent clauses and several optional ones. If a user does not accept 
the required content clauses they *may not register*. This attribute will contain the details of
the required and which optional consent clauses the user accepted, example:

```
    "consent": {
        "required": true,
        "record": true,
        "survey": false
    }
```

**Access**:

- *read*: authenticated owner only
- *write*:
  - *create*: authenticated user
  - *update*: authenticated owner only
  - *delete*: authenticated owner only

+ Attributes
    + id (string, required) - the firebase generated auth id for this user (MUST match the key of this record)
    + consent (object, required) - what consent data the user has provided. (MUST contain one or more children with boolean values)
    + name (string, required) - the user's real name
    
#### Create User [POST /users]

User signup is a three part process:

1. Create the authentication record with Firebase.
2. Authenticate with the new user record.
3. Create the multi-part User and User-Private record in the database.

**Email & Password Account**

This account type uses the users email address and a custom password just for NatureNet as
the means of authentication. Password storage and comparison is handled directly by Firebase
and this information is never provided to NatureNet.

*Native Client*
```
var users = new Firebase('https://naturenet-staging.firebaseio.com/users');
users.createUser({ email: "me@me.com", password: "secret" })
    .then(auth => {
        var record = users.child(auth.uid);
        record.set({
            id: auth.uid,
            email: "me@me.com",
            // other properties
        });
    })
    .catch(error => {
        // could not create the account
    });

```

[Listing of signup and authentication errors](https://www.firebase.com/docs/web/guide/user-auth.html#section-full-error)

**Google Account**

> TODO: Register NatureNet with Google and get an OAuth client id

**Facebook Account**

> TODO: Register NatureNet with Facebook and get an OAuth client id

+ Response 201 (application/json)

#### Read User [GET /users/{id}.json]

Returns a single user record from the database.

+ Parameters
    + id: `0737de1c-b9b9-46be-ab5b-3227274c2ced` (required) - the id of the user to read.

+ Response 200 (application/json)

        {
          "avatar": "https://s3.amazonaws.com/uifaces/faces/twitter/doctor_weber/48.jpg",
          "created_at": 1455592828926,
          "display_name": "cu nesab",
          "id": "0737de1c-b9b9-46be-ab5b-3227274c2ced",
          "testuser": true,
          "updated_at": 1455592828926
        }

#### Update User [PATCH /users/{id}.json]

Update a subset of a user. A `PATCH` update will update just the keys/values present
in the request. to replace a user use `PUT` to the same url.

+ Parameters
    + id: `0737de1c-b9b9-46be-ab5b-3227274c2ced` (required) - the id of the user to update.

+ Request

    + Body
            
            {
                "avatar": "https://i.ytimg.com/vi/sx228bU-kqw/hqdefault.jpg",
                "modified_at": {".sv": "timestamp" }
            }
            
+ Response 200 (application/json)

        {
            "avatar": "https://i.ytimg.com/vi/sx228bU-kqw/hqdefault.jpg",
            "modified_at": 1455592933283
        }

#### Delete User [DELETE /users/{id}.json]

Delete a user from the database.

+ Parameters
    + id: `0737de1c-b9b9-46be-ab5b-3227274c2ced` (required) - the id of the user to delete.

+ Response 200 (application/json)

        null

### Groups [/groups]

```
+----------------------+
|                      |
|   USER_GROUP         |
|   * id               |
|   * name             |
|   * avatar           |
|   * description      |
|   * affiliation      |
|   * creator         +-------> USER::id
|   * [members]        |
|     * member        +-------> USER::id
+----------------------+
```
A Group represents an arbitrary set of Users who share some social context.
Users may belong to one or more Groups, which contain one or more users. A group is created by a user for a particular Site

**Access**:
- *read*: public, unauthenticated
- *write*:
 - *create*: authenticated user
 - *update*: authenticated creator only
 - *delete*: authenticated creator only
 
+ Attributes
    + id (string, required) - the id of the group
    + name (string, required) - the name of the group
    + avatar (string, required) - url to an icon representing the group
    + description (string, required) - description of the group
    + affiliation (string, required) - a site name or role applicable to group members
    + creator (string, required) - the id of the user who created the group
    + members (object, optional) - id's of each user who belongs to the group, may be null/absent if there are no other members

### Commenting [/comments]

Both `Idea` and `Observation` support comments. Any user may comment on any other users idea or observation.
Comments are stored in a separate table.

**Access**:
- *read*: public, unauthenticated
- *write*:
  - *create*: authenticated user
  - *update*: authenticated commenter only
  - *delete*: authenticated commenter only

+ Attributes
    + id (string, required) - the id of the comment (MUST match the key of this record)
    + parent (string, required) - the id of the parent record (Should match the key of an OBSERVATION or IDEA record)
    + commenter (string, required) - the id of the user who created the comment (MUST match the authenticated user's UID)
    + comment (string, required) - the user submitted comment text

#### List Comments [GET /comments.json{?orderBy}{?limitToFirst}]

Returns an object containing all comments available in the database. The response will have a
key-value pair for each comment where the key is the comment's `id` and the value is the record for
that comment.

> NOTE: The full set of comment data is potentially huge. You should never make a raw request against this
> endpoint without some form or query and/or response limit. Data export is available for offline research.

+ Parameters
    + orderBy: `"$key"` (string, optional) - what key to order the results by
    + limitToFirst: `4` (number, optional) - limit the number of responses

+ Response 200 (application/json)

        {
          "-KAc5PhyQsLi_vd6OllJ" : {
            "id" : "-KAc5PhyQsLi_vd6OllJ",
            "parent" : "-KAc5Cx1M6_kGnoOHriy",
            "comment" : "Fihov zava do ed wocka lej wuw jikoc ace goj kifkevak ildif vealeaca cafpu odna ve.",
            "commenter" : "84f4926d-efd6-4f21-b521-3ccebc36f3d1",
            "created_at" : 1455592892205,
            "updated_at" : 1455592892205
          },
          "-KAc5S9-pjitmmQraJUu" : {
            "id" : "-KAc5S9-pjitmmQraJUu",
            "parent" : "-KAc5Cx1M6_kGnoOHriy",
            "comment" : "Hag aro bud rol go piduzum masu ocrujiho dausnet bi camme warupap nuvpum.",
            "commenter" : "84f4926d-efd6-4f21-b521-3ccebc36f3d1",
            "created_at" : 1455592892205,
            "updated_at" : 1455592892205
          },
          "-KAc5SRJKPwtFvHo_E52" : {
            "id" : "-KAc5SRJKPwtFvHo_E52",
            "parent" : "-KAc5Cx1M6_kGnoOHriy",
            "comment" : "Rarsag medirub soez gi vu zogek rit ripmure do kefero so no id jo bu.",
            "commenter" : "13e2d376-249d-43b5-8b33-74ee689279b8",
            "created_at" : 1455592892205,
            "updated_at" : 1455592892205
          }
        }
        
#### Read Comment [GET /comments/{id}.json]

Returns a single comment record from the database

+ Parameters
    + id: `-KAc5PhyQsLi_vd6OllJ` (required) - the id of the comment to read.

+ Response 200 (application/json)

        {
            "id" : "-KAc5PhyQsLi_vd6OllJ",
            "parent" : "-KAc5Cx1M6_kGnoOHriy",
            "comment" : "Fihov zava do ed wocka lej wuw jikoc ace goj kifkevak ildif vealeaca cafpu odna ve.",
            "commenter" : "84f4926d-efd6-4f21-b521-3ccebc36f3d1",
            "created_at" : 1455592892205,
            "updated_at" : 1455592892205
          }
        
#### Create Comment [POST /{commentable}/{id}/comments.json]

Comment on an existing idea or observation. Comment records require their firebase
key to be stored as part of the record, requests that do not contain the id will be rejected. 
Comments should be created with a multi-location update to also attach the comment's id to the parent record.
It is recommended to use a native client to achieve this:

```
var ref = new Firebase('https://naturenet-staging.firebaseio.com');
var id = ref.child('comments').push().key();

var newComment = {
    // other attributes
};

var newData = {};
newData['comments/' + id] = newComment;
newData[context + '/' + parentId + '/comments/' + id] = true;

ref.update(newData);
```

Alternatively the heroku worker provides an endpoint that will handle this on the clients
behalf. To submit a comment via the worker do `POST https://staging.nature-net.org/ideas/{id}/comments`
with the new comment data. The worker will ensure the id is set and will return the same
result as firebase would.

+ Parameters
    + commentable: `ideas` (required) - the type of record being comment on, must be one of [ideas, observations]
    + id: `-KAc5NRKaLMl0XaMnYhr` (required) - the id of the record to be commented on

+ Response 201 (application/json)

#### Update Comment [PATCH /comments/{commentId}.json]

Comments can be updated with either `PATCH` or `PUT` as described in the Update actions
for other records. Comments only contain one updateable attribute which is `comment` (in addition to timestamps).

+ Parameters
    + commentId: `-KAc5PTIP2RBeL9pBNaY` (required) the id of the comment to be updated.

+ Request

    + Body
            
            {
                "id": "-KAc5PTIP2RBeL9pBNaY",
                "parent": "KAc5Cx1M6_kGnoOHriy",
                "comment": "Actually that was a good idea",
                "modified_at": {".sv": "timestamp" }
            }
            
+ Response 200 (application/json)

        {
            "id": "-KAc5PTIP2RBeL9pBNaY",
            "parent": "KAc5Cx1M6_kGnoOHriy",
            "comment": "Actually that was a good idea",
            "modified_at": 1455592933283
        }


#### Delete Comment [DELETE /comments/{commentId}.json]

Deletes a comment from the parent record.

+ Parameters
    + commentId: `-KAc5PTIP2RBeL9pBNaY` (required) the id of the comment to be updated.
    
+ Response 200 (application/json)

        null